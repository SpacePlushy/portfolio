#
# Digital Ocean App Platform Staging Environment Configuration
# Complete image optimization system with monitoring and caching
#
name: portfolio-image-optimization-staging
region: nyc1

# Environment variables shared across all services
envs:
  - key: NODE_ENV
    value: staging
  - key: LOG_LEVEL
    value: debug
  - key: REDIS_URL
    scope: RUN_AND_BUILD_TIME
    type: SECRET
  - key: MONITORING_ENABLED
    value: "true"
  - key: IMAGE_OPTIMIZATION_ENABLED
    value: "true"
  - key: CDN_ENABLED
    value: "false"  # Disabled in staging
  - key: PERFORMANCE_MONITORING_URL
    scope: RUN_TIME
    type: SECRET

# Main portfolio application
services:
  # Primary web application
  - name: portfolio-web
    source_dir: /
    github:
      repo: SpacePlushy/portfolio
      branch: develop  # Use develop branch for staging
      deploy_on_push: true
    dockerfile_path: Dockerfile
    
    environment_slug: node-js
    instance_count: 1  # Reduced for staging
    instance_size_slug: basic-xxs
    
    http_port: 8080
    
    health_check:
      http_path: /api/health
      initial_delay_seconds: 10
      period_seconds: 10
      timeout_seconds: 5
      success_threshold: 1
      failure_threshold: 3
    
    routes:
      - path: /
    
    envs:
      - key: HOST
        value: "0.0.0.0"
      - key: PORT
        value: "8080"
      - key: IMAGE_SERVICE_URL
        value: "${image-optimizer.PRIVATE_URL}"
      - key: REDIS_URL
        value: "${redis-cache.PRIVATE_URL}"
      - key: METRICS_ENDPOINT
        value: "${monitoring.PRIVATE_URL}/metrics"
      # Staging-specific configurations
      - key: DEBUG_MODE
        value: "true"
      - key: CACHE_TTL
        value: "300"  # 5 minutes for staging
      - key: MAX_IMAGE_SIZE
        value: "5242880"  # 5MB for staging
    
    alerts:
      - rule: CPU_UTILIZATION
        value: 90  # Higher threshold for staging
      - rule: MEM_UTILIZATION  
        value: 90
      - rule: RESTART_COUNT
        value: 20

  # Image optimization service
  - name: image-optimizer
    source_dir: /
    dockerfile_path: deploy/docker/Dockerfile.image-optimizer
    
    environment_slug: node-js
    instance_count: 1  # Single instance for staging
    instance_size_slug: basic-xxs
    
    http_port: 3001
    
    health_check:
      http_path: /health
      initial_delay_seconds: 15
      period_seconds: 10
      timeout_seconds: 10
      success_threshold: 1
      failure_threshold: 3
    
    envs:
      - key: PORT
        value: "3001"
      - key: REDIS_URL
        value: "${redis-cache.PRIVATE_URL}"
      - key: MAX_IMAGE_SIZE
        value: "5242880" # 5MB for staging
      - key: SUPPORTED_FORMATS
        value: "jpeg,jpg,png,webp,avif,gif"
      - key: CACHE_TTL
        value: "1800"  # 30 minutes
      - key: WORKER_CONCURRENCY
        value: "2"  # Reduced for staging
      # Staging-specific configurations
      - key: DEBUG_SHARP
        value: "true"
      - key: VERBOSE_LOGGING
        value: "true"
    
    alerts:
      - rule: CPU_UTILIZATION
        value: 95
      - rule: MEM_UTILIZATION
        value: 95

  # Image processing worker service (single instance for staging)
  - name: image-worker
    source_dir: /
    dockerfile_path: deploy/docker/Dockerfile.image-worker
    
    environment_slug: node-js
    instance_count: 1
    instance_size_slug: basic-xxs
    
    envs:
      - key: REDIS_URL
        value: "${redis-cache.PRIVATE_URL}"
      - key: WORKER_CONCURRENCY
        value: "1"  # Single worker for staging
      - key: PROCESS_TIMEOUT
        value: "60000"  # Longer timeout for debugging
      - key: MAX_RETRIES
        value: "2"
      # Staging-specific configurations
      - key: WORKER_DEBUG
        value: "true"
      - key: PROCESS_MONITORING
        value: "true"

  # Monitoring and metrics service (optional in staging)
  - name: monitoring
    source_dir: /
    dockerfile_path: deploy/docker/Dockerfile.monitoring
    
    environment_slug: node-js
    instance_count: 1
    instance_size_slug: basic-xxs
    
    http_port: 9090
    
    health_check:
      http_path: /health
      initial_delay_seconds: 20
      period_seconds: 15
      timeout_seconds: 10
      success_threshold: 1
      failure_threshold: 3
    
    envs:
      - key: PORT
        value: "9090"
      - key: PROMETHEUS_CONFIG_PATH
        value: "/app/prometheus.yml"
      - key: GRAFANA_ADMIN_PASSWORD
        scope: RUN_TIME
        type: SECRET
      - key: ALERT_WEBHOOK_URL
        scope: RUN_TIME
        type: SECRET
      # Staging-specific configurations
      - key: RETENTION_TIME
        value: "7d"  # Shorter retention for staging
      - key: SCRAPE_INTERVAL
        value: "30s"

# Databases and external services
databases:
  # Redis for caching and job queues (smaller instance for staging)
  - name: redis-cache
    engine: REDIS
    version: "7"
    size: basic
    num_nodes: 1

# Static assets (optional in staging)
static_sites:
  - name: static-assets
    source_dir: /public
    github:
      repo: SpacePlushy/portfolio
      branch: develop
      deploy_on_push: true
    
    routes:
      - path: /assets
      - path: /images
      - path: /fonts
    
    envs:
      - key: CDN_CACHE_CONTROL
        value: "public, max-age=300"  # 5 minutes cache for staging

# Jobs for maintenance and cleanup (reduced frequency for staging)
jobs:
  # Image cache cleanup job
  - name: cache-cleanup
    source_dir: /
    dockerfile_path: deploy/docker/Dockerfile.jobs
    
    kind: POST_DEPLOY
    
    envs:
      - key: JOB_TYPE
        value: "cache-cleanup"
      - key: REDIS_URL
        value: "${redis-cache.PRIVATE_URL}"
      - key: CLEANUP_OLDER_THAN_DAYS
        value: "3"  # More aggressive cleanup in staging
    
  # Performance report job (weekly in staging)
  - name: performance-report
    source_dir: /
    dockerfile_path: deploy/docker/Dockerfile.jobs
    
    kind: CRON
    schedule: "0 6 * * 0"  # Weekly on Sunday
    
    envs:
      - key: JOB_TYPE
        value: "performance-report"
      - key: METRICS_URL
        value: "${monitoring.PRIVATE_URL}"
      - key: REPORT_WEBHOOK_URL
        scope: RUN_TIME
        type: SECRET

# Ingress configuration
ingress:
  rules:
    - match:
        path:
          prefix: /api/image
      component:
        name: image-optimizer
    - match:
        path:
          prefix: /metrics
      component:
        name: monitoring
    - match:
        path:
          prefix: /
      component:
        name: portfolio-web

# Alerts configuration (reduced for staging)
alerts:
  - rule: DEPLOYMENT_FAILED
  - rule: DOMAIN_FAILED