name: Deploy to Digital Ocean App Platform

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

# Concurrency control to prevent multiple deployments
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  DO_CLI_VERSION: '1.102.0'
  REGISTRY: registry.digitalocean.com
  REGISTRY_NAMESPACE: ${{ secrets.DO_REGISTRY_NAMESPACE }}
  
jobs:
  # =============================================================================
  # CODE QUALITY AND TESTING
  # =============================================================================
  
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint
      
      - name: Run type checking
        run: npm run typecheck
      
      - name: Check formatting
        run: npm run format:check
      
      - name: Security audit
        run: npm audit --audit-level=high
        continue-on-error: true

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm run test:coverage
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run integration tests
        run: npm run test:integration
        env:
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # =============================================================================
  # BUILD AND PREPARE ARTIFACTS
  # =============================================================================
  
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests]
    if: always() && (needs.code-quality.result == 'success' || needs.code-quality.result == 'skipped') && (needs.unit-tests.result == 'success' || needs.unit-tests.result == 'skipped') && (needs.integration-tests.result == 'success' || needs.integration-tests.result == 'skipped')
    
    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}
      deployment-ready: ${{ steps.build-check.outputs.ready }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Generate image tag
        id: image-tag
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "tag=production-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          else
            echo "tag=staging-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          fi
      
      - name: Build check
        id: build-check
        run: |
          if [[ -d "dist" && -f "dist/server/entry.mjs" ]]; then
            echo "ready=true" >> $GITHUB_OUTPUT
          else
            echo "ready=false" >> $GITHUB_OUTPUT
            exit 1
          fi
      
      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            package*.json
            Dockerfile*
            deploy/
          retention-days: 7

  # =============================================================================
  # DOCKER IMAGE BUILDING
  # =============================================================================
  
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build]
    if: needs.build.outputs.deployment-ready == 'true'
    
    strategy:
      matrix:
        service: [web, image-optimizer, image-worker, monitoring, jobs]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .
      
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      
      - name: Log in to DO Container Registry
        run: doctl registry login --expiry-seconds 1200
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.service == 'web' && 'Dockerfile' || format('deploy/docker/Dockerfile.{0}', matrix.service) }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/portfolio-${{ matrix.service }}:${{ needs.build.outputs.image-tag }}
            ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/portfolio-${{ matrix.service }}:latest
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_TIME=${{ github.run_id }}
            GIT_COMMIT=${{ github.sha }}

  # =============================================================================
  # DEPLOYMENT ENVIRONMENTS
  # =============================================================================
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, build-images]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      
      - name: Deploy to DO App Platform (Staging)
        run: |
          # Update app spec with new image tags
          sed -i "s|image: .*portfolio-|image: ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/portfolio-|g" .do/app.staging.yaml
          sed -i "s|:latest|:${{ needs.build.outputs.image-tag }}|g" .do/app.staging.yaml
          
          # Deploy to staging app
          doctl apps update ${{ secrets.DO_STAGING_APP_ID }} --spec .do/app.staging.yaml --wait
      
      - name: Verify deployment health
        run: |
          sleep 60  # Wait for deployment to stabilize
          curl -f ${{ secrets.STAGING_URL }}/api/health || exit 1
      
      - name: Run smoke tests
        run: |
          npm ci
          npm run test:smoke
        env:
          TEST_BASE_URL: ${{ secrets.STAGING_URL }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, build-images, security-scan]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      
      - name: Pre-deployment backup
        run: |
          # Backup current Redis data
          doctl databases backups create ${{ secrets.DO_REDIS_CLUSTER_ID }} --wait
      
      - name: Deploy to DO App Platform (Production)
        id: deploy
        run: |
          # Update app spec with new image tags
          sed -i "s|image: .*portfolio-|image: ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/portfolio-|g" .do/app.yaml
          sed -i "s|:latest|:${{ needs.build.outputs.image-tag }}|g" .do/app.yaml
          
          # Deploy to production app
          doctl apps update ${{ secrets.DO_PRODUCTION_APP_ID }} --spec .do/app.yaml --wait
          
          echo "deployment-id=$(doctl apps list-deployments ${{ secrets.DO_PRODUCTION_APP_ID }} --format ID --no-header | head -1)" >> $GITHUB_OUTPUT
      
      - name: Verify deployment health
        run: |
          sleep 90  # Wait for deployment to stabilize
          
          # Check main application health
          curl -f ${{ secrets.PRODUCTION_URL }}/api/health || exit 1
          
          # Check image optimization service health
          curl -f ${{ secrets.PRODUCTION_URL }}/api/image/health || exit 1
          
          # Check monitoring endpoint
          curl -f ${{ secrets.PRODUCTION_URL }}/metrics || exit 1
      
      - name: Run production smoke tests
        run: |
          npm ci
          npm run test:smoke:production
        env:
          TEST_BASE_URL: ${{ secrets.PRODUCTION_URL }}
      
      - name: Performance validation
        run: |
          npm run test:performance
        env:
          TEST_BASE_URL: ${{ secrets.PRODUCTION_URL }}
      
      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback..."
          
          # Get previous deployment ID
          PREVIOUS_DEPLOYMENT=$(doctl apps list-deployments ${{ secrets.DO_PRODUCTION_APP_ID }} --format ID --no-header | sed -n '2p')
          
          if [[ -n "$PREVIOUS_DEPLOYMENT" ]]; then
            # Rollback to previous deployment
            doctl apps create-deployment ${{ secrets.DO_PRODUCTION_APP_ID }} --wait
            echo "Rollback completed to deployment: $PREVIOUS_DEPLOYMENT"
          else
            echo "No previous deployment found for rollback"
            exit 1
          fi

  # =============================================================================
  # POST-DEPLOYMENT TASKS
  # =============================================================================
  
  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      
      - name: Run cache cleanup job
        run: |
          doctl apps create-deployment ${{ secrets.DO_PRODUCTION_APP_ID }} --wait
      
      - name: Update monitoring dashboards
        run: |
          curl -X POST "${{ secrets.GRAFANA_API_URL }}/api/dashboards/db" \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d @deploy/config/grafana/dashboards/portfolio-overview.json
      
      - name: Send deployment notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Create GitHub release
        if: github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Production Release v${{ github.run_number }}
          body: |
            ## Deployment Summary
            
            **Deployed Image Tag:** `${{ needs.build.outputs.image-tag }}`
            **Commit:** ${{ github.sha }}
            **Deployment Time:** ${{ github.run_id }}
            
            ### Services Deployed
            - Portfolio Web Application
            - Image Optimization Service
            - Image Processing Workers
            - Monitoring and Metrics
            - Maintenance Jobs
            
            ### Health Checks
            ✅ All services healthy
            ✅ Performance tests passed
            ✅ Security scans completed
          draft: false
          prerelease: false

  # =============================================================================
  # CLEANUP AND MAINTENANCE
  # =============================================================================
  
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment]
    if: always()
    
    steps:
      - name: Clean up old container images
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      
      - name: Remove old images from registry
        run: |
          # Keep only the last 10 images per service
          for service in web image-optimizer image-worker monitoring jobs; do
            OLD_IMAGES=$(doctl registry repository list-tags portfolio-$service --format Tag --no-header | tail -n +11)
            for tag in $OLD_IMAGES; do
              doctl registry repository delete-tag portfolio-$service $tag --force
            done
          done
      
      - name: Clean up build artifacts
        uses: geekyeggo/delete-artifact@v4
        if: always()
        with:
          name: build-artifacts