# Multi-stage Docker build optimized for Digital Ocean deployment
# Optimized for image processing performance and minimal bundle size

# Stage 1: Build dependencies and tools
FROM node:20-alpine AS dependencies
LABEL maintainer="frank@frankpalmisano.com"
LABEL description="Optimized Astro portfolio with image processing"

# Install system dependencies for Sharp and image processing
RUN apk add --no-cache \
    vips-dev \
    libc6-compat \
    python3 \
    make \
    g++ \
    cairo-dev \
    pango-dev \
    jpeg-dev \
    giflib-dev \
    librsvg-dev \
    pixman-dev \
    pkgconfig

# Set working directory
WORKDIR /app

# Copy package files first for better caching
COPY package*.json ./
COPY tsconfig.json ./
COPY components.json ./

# Install dependencies with production optimizations
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV ASTRO_TELEMETRY_DISABLED=1

# Install dependencies with npm ci for reproducible builds
RUN npm ci --only=production --no-audit --no-fund

# Stage 2: Build application
FROM node:20-alpine AS builder

# Install build dependencies
RUN apk add --no-cache vips-dev libc6-compat

WORKDIR /app

# Copy dependencies from previous stage
COPY --from=dependencies /app/node_modules ./node_modules
COPY --from=dependencies /app/package*.json ./

# Copy source code
COPY . .

# Build application with optimizations
ENV NODE_ENV=production
ENV ASTRO_TELEMETRY_DISABLED=1

# Configure build optimizations
ENV NODE_OPTIONS="--max-old-space-size=4096"
ENV SHARP_CACHE_SIZE=100
ENV SHARP_CONCURRENCY=2

RUN npm run build

# Stage 3: Runtime image
FROM node:20-alpine AS runtime

# Install runtime dependencies for image processing
RUN apk add --no-cache \
    vips \
    libc6-compat \
    redis \
    curl \
    && rm -rf /var/cache/apk/*

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S astro -u 1001

WORKDIR /app

# Copy built application
COPY --from=builder --chown=astro:nodejs /app/dist ./dist
COPY --from=builder --chown=astro:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=astro:nodejs /app/package*.json ./

# Create cache directories
RUN mkdir -p .cache/images && \
    chown -R astro:nodejs .cache

# Configure image processing optimizations
ENV NODE_ENV=production
ENV PORT=4321
ENV HOST=0.0.0.0

# Sharp optimizations for production
ENV SHARP_CACHE_SIZE=200
ENV SHARP_CONCURRENCY=4
ENV SHARP_SIMD=true

# Redis configuration for caching
ENV REDIS_URL=redis://localhost:6379
ENV REDIS_CACHE_TTL=3600

# Memory optimizations
ENV NODE_OPTIONS="--max-old-space-size=2048 --optimize-for-size"

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:4321/api/health || exit 1

# Switch to non-root user
USER astro

# Expose port
EXPOSE 4321

# Start application
CMD ["node", "./dist/server/entry.mjs"]

# Stage 4: Development image (optional)
FROM runtime AS development

USER root

# Install development dependencies
RUN apk add --no-cache git openssh-client

# Copy development files
COPY --chown=astro:nodejs . .

# Install all dependencies for development
RUN npm ci --no-audit --no-fund

USER astro

# Override for development
CMD ["npm", "run", "dev", "--", "--host", "0.0.0.0"]