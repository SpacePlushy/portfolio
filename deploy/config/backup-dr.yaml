# =============================================================================
# BACKUP AND DISASTER RECOVERY CONFIGURATION
# =============================================================================
# Comprehensive backup strategy for image optimization system on Digital Ocean

# =============================================================================
# BACKUP STRATEGY OVERVIEW
# =============================================================================

backup_strategy:
  retention_policy:
    daily_backups: 7      # Keep 7 daily backups
    weekly_backups: 4     # Keep 4 weekly backups
    monthly_backups: 12   # Keep 12 monthly backups
    yearly_backups: 3     # Keep 3 yearly backups
  
  backup_types:
    - database_backups    # Redis data
    - image_cache_backups # Processed images
    - config_backups      # Application configurations
    - monitoring_data     # Metrics and logs
  
  backup_schedule:
    daily: "0 2 * * *"     # 2 AM UTC daily
    weekly: "0 3 * * 0"    # 3 AM UTC Sunday
    monthly: "0 4 1 * *"   # 4 AM UTC 1st of month

# =============================================================================
# REDIS DATABASE BACKUP
# =============================================================================

redis_backup:
  enabled: true
  
  # Digital Ocean Managed Redis automatic backups
  managed_backup:
    enabled: true
    schedule: "daily"
    retention_days: 7
    backup_window: "02:00-04:00"  # 2-4 AM UTC
    point_in_time_recovery: true
  
  # Custom Redis backup for additional safety
  custom_backup:
    enabled: true
    method: "redis-dump"
    
    # Backup configuration
    backup_command: |
      redis-cli --rdb /backup/redis-$(date +%Y%m%d-%H%M%S).rdb
      redis-cli BGSAVE
    
    # Storage configuration
    storage:
      type: "digitalocean_spaces"
      bucket: "portfolio-backups"
      region: "nyc3"
      path: "redis-backups/"
      encryption: true
    
    # Compression and optimization
    compression:
      enabled: true
      algorithm: "gzip"
      level: 6
    
    # Validation
    validation:
      enabled: true
      test_restore: true
      integrity_check: true

# =============================================================================
# IMAGE CACHE BACKUP
# =============================================================================

image_backup:
  enabled: true
  
  # Processed images backup
  processed_images:
    enabled: true
    source_paths:
      - "/app/.cache/images/"
      - "/app/public/optimized/"
    
    # Incremental backup strategy
    backup_type: "incremental"
    full_backup_frequency: "weekly"
    
    # Storage configuration
    storage:
      type: "digitalocean_spaces"
      bucket: "portfolio-image-backups"
      region: "nyc3"
      path: "processed-images/"
      cdn_enabled: true
    
    # Deduplication
    deduplication:
      enabled: true
      hash_algorithm: "sha256"
      chunk_size: "4MB"
    
    # Lifecycle management
    lifecycle:
      enabled: true
      rules:
        - name: "transition_to_infrequent_access"
          days: 30
          storage_class: "STANDARD_IA"
        - name: "delete_old_backups"
          days: 365
          action: "delete"
  
  # Original images backup (if stored locally)
  original_images:
    enabled: false  # Usually not needed for portfolio site
    retention_days: 90

# =============================================================================
# APPLICATION CONFIGURATION BACKUP
# =============================================================================

config_backup:
  enabled: true
  
  # Configuration files to backup
  config_files:
    - "/app/astro.config.mjs"
    - "/app/package.json"
    - "/app/tsconfig.json"
    - "/app/.env.production"
    - "/app/monitoring/"
    - "/app/deploy/"
  
  # Git repository backup
  git_backup:
    enabled: true
    mirror_repositories:
      - "git@github.com:SpacePlushy/portfolio-backup.git"
    backup_frequency: "daily"
  
  # Environment variables backup
  env_backup:
    enabled: true
    # Secure backup of environment variables (encrypted)
    encryption_key_source: "digitalocean_secrets"
    backup_location: "digitalocean_spaces"

# =============================================================================
# MONITORING DATA BACKUP
# =============================================================================

monitoring_backup:
  enabled: true
  
  # Prometheus data backup
  prometheus:
    enabled: true
    data_path: "/prometheus"
    retention_days: 30
    
    backup_schedule:
      full: "0 3 * * 0"      # Weekly full backup
      incremental: "0 3 * * 1-6"  # Daily incremental
    
    storage:
      type: "digitalocean_spaces"
      bucket: "portfolio-monitoring-backups"
      path: "prometheus/"
  
  # Grafana dashboard backup
  grafana:
    enabled: true
    backup_method: "api_export"
    
    backup_items:
      - dashboards
      - datasources
      - alerting_rules
      - user_preferences
    
    storage:
      type: "git_repository"
      repository: "monitoring-configs"
      branch: "main"

# =============================================================================
# DISASTER RECOVERY CONFIGURATION
# =============================================================================

disaster_recovery:
  enabled: true
  
  # Recovery Time Objective (RTO) and Recovery Point Objective (RPO)
  objectives:
    rto: "4h"      # 4 hours maximum downtime
    rpo: "1h"      # Maximum 1 hour data loss
  
  # Multi-region setup
  regions:
    primary:
      name: "nyc3"
      role: "active"
    
    secondary:
      name: "sfo3"
      role: "standby"
      replication_enabled: true
      replication_lag_threshold: "5m"
  
  # Failover configuration
  failover:
    enabled: true
    trigger_conditions:
      - primary_region_down: "5m"
      - health_check_failures: 5
      - manual_trigger: true
    
    failover_process:
      1. "Stop traffic to primary region"
      2. "Verify secondary region health"
      3. "Update DNS to point to secondary"
      4. "Start services in secondary region"
      5. "Verify application functionality"
      6. "Send notifications"
    
    # Automatic failback
    failback:
      enabled: true
      conditions:
        - primary_region_healthy: "30m"
        - manual_approval: true
  
  # Data replication
  replication:
    # Redis cross-region replication
    redis:
      enabled: true
      replication_mode: "async"
      replication_lag_alert: "10s"
    
    # Image backup replication
    images:
      enabled: true
      replication_method: "rsync"
      replication_frequency: "4h"

# =============================================================================
# BACKUP MONITORING AND ALERTING
# =============================================================================

backup_monitoring:
  enabled: true
  
  # Backup job monitoring
  job_monitoring:
    enabled: true
    timeout_threshold: "2h"
    failure_threshold: 2  # Alert after 2 consecutive failures
    
    metrics:
      - backup_duration_seconds
      - backup_size_bytes
      - backup_success_total
      - backup_failure_total
  
  # Backup validation
  validation:
    enabled: true
    
    # Regular restore tests
    restore_tests:
      enabled: true
      frequency: "weekly"
      scope: "partial"  # Test restore of sample data
      automation: "scheduled"
    
    # Integrity checks
    integrity_checks:
      enabled: true
      frequency: "daily"
      methods:
        - checksum_verification
        - file_count_validation
        - size_validation
  
  # Alerting configuration
  alerts:
    channels:
      - type: "slack"
        webhook_url: "${BACKUP_ALERT_WEBHOOK}"
        severity_levels: ["warning", "critical"]
      
      - type: "email"
        recipients: ["ops@company.com"]
        severity_levels: ["critical"]
    
    alert_rules:
      - name: "backup_failure"
        condition: "backup_failure_total > 0"
        severity: "critical"
        message: "Backup job failed: {{ $labels.job_name }}"
      
      - name: "backup_duration_high"
        condition: "backup_duration_seconds > 7200"  # 2 hours
        severity: "warning"
        message: "Backup taking longer than expected"
      
      - name: "backup_size_anomaly"
        condition: "abs(backup_size_bytes - backup_size_bytes offset 1d) / backup_size_bytes > 0.5"
        severity: "warning"
        message: "Backup size changed significantly"

# =============================================================================
# BACKUP AUTOMATION SCRIPTS
# =============================================================================

automation:
  # Backup job container
  backup_job:
    image: "backup-tools:latest"
    schedule: "0 2 * * *"  # Daily at 2 AM
    
    environment:
      - REDIS_URL: "${REDIS_URL}"
      - DO_SPACES_KEY: "${DO_SPACES_ACCESS_KEY}"
      - DO_SPACES_SECRET: "${DO_SPACES_SECRET_KEY}"
      - BACKUP_ENCRYPTION_KEY: "${BACKUP_ENCRYPTION_KEY}"
    
    resources:
      cpu: "500m"
      memory: "1Gi"
      storage: "10Gi"
    
    volumes:
      - name: "backup-storage"
        size: "100Gi"
        mount_path: "/backup"
  
  # Cleanup job
  cleanup_job:
    enabled: true
    schedule: "0 4 * * 0"  # Weekly at 4 AM Sunday
    
    cleanup_rules:
      # Remove old backup files
      - path: "/backup/redis-*"
        age: "7d"
        pattern: "*.rdb"
      
      # Remove old log files
      - path: "/backup/logs-*"
        age: "30d"
        pattern: "*.log.gz"

# =============================================================================
# COMPLIANCE AND SECURITY
# =============================================================================

compliance:
  # Data encryption
  encryption:
    at_rest: true
    in_transit: true
    key_management: "digitalocean_managed"
  
  # Access control
  access_control:
    backup_access:
      roles: ["backup_admin", "ops_engineer"]
      mfa_required: true
    
    restore_access:
      roles: ["senior_ops", "platform_admin"]
      approval_required: true
      audit_logging: true
  
  # Compliance requirements
  compliance_standards:
    - "SOC2"
    - "GDPR"  # If handling EU user data
  
  audit:
    enabled: true
    retention_days: 90
    log_actions:
      - backup_creation
      - backup_restoration
      - backup_deletion
      - access_attempts

# =============================================================================
# TESTING AND VALIDATION
# =============================================================================

testing:
  # Disaster recovery drills
  dr_drills:
    enabled: true
    frequency: "quarterly"
    scope: "full_system"
    
    drill_scenarios:
      - "complete_primary_region_failure"
      - "database_corruption"
      - "partial_service_failure"
      - "network_partition"
    
    success_criteria:
      - rto_compliance: true
      - rpo_compliance: true
      - data_integrity: true
      - functionality_verification: true
  
  # Backup restoration tests
  restore_tests:
    enabled: true
    frequency: "monthly"
    
    test_types:
      - "point_in_time_recovery"
      - "full_system_restore"
      - "selective_data_restore"
    
    validation_steps:
      1. "Create isolated test environment"
      2. "Restore from backup"
      3. "Verify data integrity"
      4. "Test application functionality"
      5. "Performance validation"
      6. "Cleanup test environment"

# =============================================================================
# DOCUMENTATION AND RUNBOOKS
# =============================================================================

documentation:
  backup_procedures:
    location: "/docs/operations/backup-procedures.md"
    
  disaster_recovery_runbook:
    location: "/docs/operations/disaster-recovery-runbook.md"
    
  restore_procedures:
    location: "/docs/operations/restore-procedures.md"
  
  contact_information:
    primary_contact: "ops-team@company.com"
    escalation_contact: "engineering-manager@company.com"
    external_support: "digitalocean-support"