# =============================================================================
# IMAGE OPTIMIZATION SERVICE DOCKERFILE
# =============================================================================
# Specialized container for image processing with Sharp and WebP/AVIF support

# Build stage with full build tools
FROM node:20-alpine AS builder

# Install build dependencies for Sharp and image processing
RUN apk add --no-cache \
    build-base \
    python3 \
    make \
    g++ \
    libc6-compat \
    vips-dev \
    && apk upgrade

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies including build tools
RUN npm ci --include=dev

# Copy source code
COPY src/ ./src/
COPY deploy/services/image-optimizer/ ./
COPY tsconfig.json ./

# Build the image optimizer service
RUN npm run build:image-optimizer

# Production stage
FROM node:20-alpine AS runtime

# Install runtime dependencies for image processing
RUN apk add --no-cache \
    vips \
    dumb-init \
    tini \
    && apk upgrade

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install only production dependencies
RUN npm ci --production --no-optional && \
    npm cache clean --force

# Copy built application
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /app/src/services/imageOptimization.ts ./src/services/
COPY --from=builder --chown=nodejs:nodejs /app/src/services/sharpOptimization.ts ./src/services/

# Create directories for image processing
RUN mkdir -p /app/temp /app/cache && \
    chown -R nodejs:nodejs /app

# Switch to non-root user
USER nodejs

# Health check for image optimizer
HEALTHCHECK --interval=30s --timeout=15s --start-period=10s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Environment variables
ENV NODE_ENV=production
ENV PORT=3001
ENV HOST=0.0.0.0
ENV TEMP_DIR=/app/temp
ENV CACHE_DIR=/app/cache

# Expose port
EXPOSE 3001

# Use tini for proper signal handling
ENTRYPOINT ["tini", "--"]

# Start the image optimization service
CMD ["node", "dist/image-optimizer.js"]