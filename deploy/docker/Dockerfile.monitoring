# =============================================================================
# MONITORING SERVICE DOCKERFILE
# =============================================================================
# Prometheus and Grafana monitoring stack for the image optimization system

# Build stage
FROM node:20-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    build-base \
    python3 \
    make \
    g++ \
    && apk upgrade

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --include=dev

# Copy monitoring service source
COPY deploy/services/monitoring/ ./
COPY monitoring/ ./monitoring/
COPY tsconfig.json ./

# Build monitoring service
RUN npm run build:monitoring

# Production stage with Prometheus and Grafana
FROM prom/prometheus:latest AS prometheus-base

# Multi-stage final image
FROM node:20-alpine AS runtime

# Install monitoring tools and dependencies
RUN apk add --no-cache \
    curl \
    wget \
    dumb-init \
    tini \
    && apk upgrade

# Install Prometheus
COPY --from=prometheus-base /bin/prometheus /usr/local/bin/
COPY --from=prometheus-base /bin/promtool /usr/local/bin/

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

WORKDIR /app

# Copy package files and install production dependencies
COPY package*.json ./
RUN npm ci --production --no-optional && \
    npm cache clean --force

# Copy built monitoring service
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /app/monitoring ./monitoring

# Copy Prometheus configuration
COPY monitoring/prometheus.yml /etc/prometheus/
COPY monitoring/alerts.yml /etc/prometheus/
COPY monitoring/dashboards/ /app/dashboards/

# Create directories
RUN mkdir -p /app/data /app/logs /prometheus && \
    chown -R nodejs:nodejs /app /prometheus

# Switch to non-root user
USER nodejs

# Health check for monitoring service
HEALTHCHECK --interval=30s --timeout=10s --start-period=20s --retries=3 \
    CMD curl -f http://localhost:9090/health || exit 1

# Environment variables
ENV NODE_ENV=production
ENV PORT=9090
ENV PROMETHEUS_PORT=9090
ENV PROMETHEUS_CONFIG=/etc/prometheus/prometheus.yml
ENV DATA_DIR=/app/data

# Expose ports
EXPOSE 9090

# Use tini for signal handling
ENTRYPOINT ["tini", "--"]

# Start monitoring services
CMD ["sh", "-c", "prometheus --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus --web.console.libraries=/etc/prometheus/console_libraries --web.console.templates=/etc/prometheus/consoles --web.enable-lifecycle & node dist/monitoring-server.js"]