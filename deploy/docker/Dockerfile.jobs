# =============================================================================
# MAINTENANCE JOBS DOCKERFILE
# =============================================================================
# Container for running maintenance tasks like cache cleanup and performance reports

# Build stage
FROM node:20-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    build-base \
    python3 \
    make \
    g++ \
    && apk upgrade

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --include=dev

# Copy job scripts and utilities
COPY deploy/jobs/ ./jobs/
COPY src/utils/ ./src/utils/
COPY src/services/ ./src/services/
COPY tsconfig.json ./

# Build job utilities
RUN npm run build:jobs

# Production stage
FROM node:20-alpine AS runtime

# Install runtime dependencies
RUN apk add --no-cache \
    curl \
    jq \
    dumb-init \
    tini \
    && apk upgrade

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install production dependencies
RUN npm ci --production --no-optional && \
    npm cache clean --force

# Copy built jobs
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /app/jobs ./jobs

# Create directories
RUN mkdir -p /app/logs /app/reports && \
    chown -R nodejs:nodejs /app

# Switch to non-root user
USER nodejs

# Environment variables
ENV NODE_ENV=production
ENV JOB_TYPE=cache-cleanup
ENV LOG_DIR=/app/logs
ENV REPORTS_DIR=/app/reports

# Use tini for signal handling
ENTRYPOINT ["tini", "--"]

# Default job runner - will be overridden by JOB_TYPE env var
CMD ["node", "dist/job-runner.js"]