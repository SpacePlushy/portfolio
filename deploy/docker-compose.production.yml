# =============================================================================
# PRODUCTION DOCKER COMPOSE CONFIGURATION
# =============================================================================
# Complete image optimization system for Digital Ocean deployment
# This file is primarily for local testing of the production setup

version: '3.8'

# Shared network for service communication
networks:
  portfolio-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Shared volumes for data persistence
volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  image-cache:
    driver: local
  logs:
    driver: local

services:
  # =============================================================================
  # CORE APPLICATION SERVICES
  # =============================================================================
  
  # Main portfolio web application
  portfolio-web:
    build:
      context: ../..
      dockerfile: Dockerfile
    container_name: portfolio-web
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - portfolio-net
    environment:
      - NODE_ENV=production
      - HOST=0.0.0.0
      - PORT=8080
      - REDIS_URL=redis://redis-cache:6379
      - IMAGE_SERVICE_URL=http://image-optimizer:3001
      - MONITORING_ENABLED=true
      - LOG_LEVEL=info
    volumes:
      - logs:/app/logs
    depends_on:
      - redis-cache
      - image-optimizer
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Image optimization service
  image-optimizer:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile.image-optimizer
    container_name: image-optimizer
    restart: unless-stopped
    ports:
      - "3001:3001"
    networks:
      - portfolio-net
    environment:
      - NODE_ENV=production
      - PORT=3001
      - HOST=0.0.0.0
      - REDIS_URL=redis://redis-cache:6379
      - MAX_IMAGE_SIZE=10485760
      - SUPPORTED_FORMATS=jpeg,jpg,png,webp,avif,gif
      - CACHE_TTL=3600
      - WORKER_CONCURRENCY=4
      - TEMP_DIR=/app/temp
      - CACHE_DIR=/app/cache
    volumes:
      - image-cache:/app/cache
      - logs:/app/logs
    depends_on:
      - redis-cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M

  # Image processing workers
  image-worker-1:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile.image-worker
    container_name: image-worker-1
    restart: unless-stopped
    networks:
      - portfolio-net
    environment:
      - NODE_ENV=production
      - WORKER_ID=worker-1
      - REDIS_URL=redis://redis-cache:6379
      - WORKER_CONCURRENCY=2
      - PROCESS_TIMEOUT=30000
      - MAX_RETRIES=3
      - TEMP_DIR=/app/temp
    volumes:
      - image-cache:/app/cache
      - logs:/app/logs
    depends_on:
      - redis-cache
    deploy:
      resources:
        limits:
          cpus: '0.8'
          memory: 768M
        reservations:
          cpus: '0.1'
          memory: 128M

  image-worker-2:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile.image-worker
    container_name: image-worker-2
    restart: unless-stopped
    networks:
      - portfolio-net
    environment:
      - NODE_ENV=production
      - WORKER_ID=worker-2
      - REDIS_URL=redis://redis-cache:6379
      - WORKER_CONCURRENCY=2
      - PROCESS_TIMEOUT=30000
      - MAX_RETRIES=3
      - TEMP_DIR=/app/temp
    volumes:
      - image-cache:/app/cache
      - logs:/app/logs
    depends_on:
      - redis-cache
    deploy:
      resources:
        limits:
          cpus: '0.8'
          memory: 768M
        reservations:
          cpus: '0.1'
          memory: 128M

  # =============================================================================
  # INFRASTRUCTURE SERVICES
  # =============================================================================

  # Redis cache and job queue
  redis-cache:
    image: redis:7-alpine
    container_name: redis-cache
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - portfolio-net
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # =============================================================================
  # MONITORING AND OBSERVABILITY
  # =============================================================================

  # Monitoring service with Prometheus
  monitoring:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile.monitoring
    container_name: monitoring
    restart: unless-stopped
    ports:
      - "9090:9090"
    networks:
      - portfolio-net
    environment:
      - NODE_ENV=production
      - PORT=9090
      - PROMETHEUS_CONFIG=/etc/prometheus/prometheus.yml
      - DATA_DIR=/app/data
    volumes:
      - prometheus-data:/prometheus
      - logs:/app/logs
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./config/alerts.yml:/etc/prometheus/alerts.yml
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - portfolio-net
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards/portfolio-overview.json
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # =============================================================================
  # LOAD BALANCER AND REVERSE PROXY
  # =============================================================================

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: nginx-lb
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    networks:
      - portfolio-net
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/ssl:/etc/nginx/ssl
      - logs:/var/log/nginx
    depends_on:
      - portfolio-web
      - image-optimizer
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.05'
          memory: 32M

  # =============================================================================
  # MAINTENANCE AND JOBS
  # =============================================================================

  # Cache cleanup job (runs post-deploy)
  cache-cleanup:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile.jobs
    container_name: cache-cleanup
    networks:
      - portfolio-net
    environment:
      - NODE_ENV=production
      - JOB_TYPE=cache-cleanup
      - REDIS_URL=redis://redis-cache:6379
      - CLEANUP_OLDER_THAN_DAYS=7
    volumes:
      - logs:/app/logs
    depends_on:
      - redis-cache
    deploy:
      restart_policy:
        condition: none
      resources:
        limits:
          cpus: '0.1'
          memory: 128M

  # Performance report job (scheduled via cron or external scheduler)
  performance-report:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile.jobs
    container_name: performance-report
    networks:
      - portfolio-net
    environment:
      - NODE_ENV=production
      - JOB_TYPE=performance-report
      - METRICS_URL=http://monitoring:9090
      - REPORT_WEBHOOK_URL=${REPORT_WEBHOOK_URL}
    volumes:
      - logs:/app/logs
    depends_on:
      - monitoring
    deploy:
      restart_policy:
        condition: none
      resources:
        limits:
          cpus: '0.1'
          memory: 128M

# =============================================================================
# PRODUCTION DEPLOYMENT LABELS
# =============================================================================
x-labels: &default-labels
  com.portfolio.environment: "production"
  com.portfolio.version: "1.0.0"
  com.portfolio.component: "image-optimization"

# Apply labels to all services
x-service-defaults: &service-defaults
  labels:
    <<: *default-labels